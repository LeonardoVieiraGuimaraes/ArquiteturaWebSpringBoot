# name: Deploy Spring Boot App to Home Server

# on:
#   push:
#     branches:
#       - main
#     paths-ignore:
#       - 'README.md'
#       - 'comandos.txt'
#       - '**/*.md'
#   workflow_dispatch:

# jobs:
#   build-and-deploy:
#     name: 🏠 Build and Deploy to Home Server
#     runs-on: ubuntu-latest
    
#     env:
#       SPRING_PROFILES_ACTIVE: prod
#       MAVEN_OPTS: -Xmx2048m
    
#     steps:
#       - name: 🚚 Checkout code
#         uses: actions/checkout@v4

#       - name: ☕ Setup Java
#         uses: actions/setup-java@v4
#         with:
#           java-version: '24'
#           distribution: 'eclipse-temurin'
#           cache: maven

#       - name: � Make Maven wrapper executable
#         run: chmod +x ./mvnw

#       - name: 🧪 Run tests
#         run: ./mvnw clean test

#       - name: 🔨 Build Spring Boot application
#         run: ./mvnw clean package -DskipTests

#       - name: 📋 Verify build artifacts
#         run: |
#           echo "=== Build artifacts ==="
#           ls -la target/
#           echo "=== JAR file details ==="
#           ls -la target/*.jar

#       - name: ☁️ Setup Cloudflare
#         run: |
#           wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
#           sudo dpkg -i cloudflared-linux-amd64.deb

#       - name: 🔑 Setup SSH key
#         uses: webfactory/ssh-agent@v0.9.0
#         with:
#           ssh-private-key: ${{ secrets.HOME_SERVER_SSH_KEY }}

#       - name: 🔐 Configure SSH
#         run: |
#           mkdir -p ~/.ssh
#           echo "Host ssh.leoproti.com.br" >> ~/.ssh/config
#           echo "  StrictHostKeyChecking no" >> ~/.ssh/config
#           echo "  UserKnownHostsFile /dev/null" >> ~/.ssh/config
#           chmod 600 ~/.ssh/config

#       - name: 🧹 Clean and prepare server
#         run: |
#           ssh -o ProxyCommand="cloudflared access ssh --hostname %h" \
#               leonardovieiraxy@ssh.leoproti.com.br << 'EOF'
#             # Criar pasta projetos se não existir
#             mkdir -p /home/leonardovieiraxy/projetos
            
#             # Parar e remover containers/pasta existentes
#             if [ -d "/home/leonardovieiraxy/projetos/spring-boot-app" ]; then
#               cd /home/leonardovieiraxy/projetos/spring-boot-app
#               docker compose down || true
#               cd ..
#               rm -rf spring-boot-app
#             fi
            
#             # Criar nova pasta com permissões corretas
#             mkdir -p /home/leonardovieiraxy/projetos/spring-boot-app
#             chmod 755 /home/leonardovieiraxy/projetos/spring-boot-app
#           EOF

#       - name: 📤 Transfer project files
#         run: |
#           # Criar pasta temporária com arquivos necessários
#           mkdir -p temp-deploy
#           cp docker-compose.yml temp-deploy/
#           cp Dockerfile.spring temp-deploy/
#           cp -r target temp-deploy/
          
#           # Transferir arquivos usando rsync (mais robusto que scp)
#           rsync -avz --delete \
#                 -e "ssh -o ProxyCommand='cloudflared access ssh --hostname %h'" \
#                 temp-deploy/ \
#                 leonardovieiraxy@ssh.leoproti.com.br:/home/leonardovieiraxy/projetos/spring-boot-app/

#       - name: 🚀 Deploy on server
#         run: |
#           ssh -o ProxyCommand="cloudflared access ssh --hostname %h" \
#               leonardovieiraxy@ssh.leoproti.com.br << 'EOF'
#             cd /home/leonardovieiraxy/projetos/spring-boot-app
            
#             # Debug: verificar arquivos transferidos
#             echo "=== Arquivos na pasta ==="
#             ls -la
#             echo "=== Arquivos target ==="
#             ls -la target/ | head -5
            
#             # Build e start do container
#             echo "=== Building container ==="
#             docker compose build --no-cache
            
#             echo "=== Starting container ==="
#             docker compose up -d
            
#             # Verificar status
#             echo "=== Container status ==="
#             docker compose ps
            
#             # Aguardar inicialização da aplicação
#             echo "=== Aguardando inicialização da aplicação ==="
#             sleep 30
            
#             # Teste básico - Spring Boot default port 8080, mapeado para 8006
#             echo "=== Testing Spring Boot application ==="
#             curl -f http://localhost:8006/actuator/health || \
#             curl -f http://localhost:8006/ || \
#             echo "Application não respondeu nos endpoints testados"
            
#             # Verificar logs em caso de erro
#             echo "=== Container logs (últimas 20 linhas) ==="
#             docker compose logs --tail=20
            
#             # Limpeza
#             docker system prune -f
#           EOF

#       - name: ✅ Deployment Summary
#         run: |
#           echo "🎉 Deployment completed!"
#           echo "📝 Summary:"
#           echo "- Application: Spring Boot ArquiteturaWebSpringBoot"
#           echo "- Java Version: 24"
#           echo "- Build Tool: Maven"
#           echo "- Deploy URL: http://ssh.leoproti.com.br:8006"
#           echo "- Health Check: http://ssh.leoproti.com.br:8006/actuator/health"
